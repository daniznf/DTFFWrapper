/*
    This file is part of DTFFWrapper.

    DTFFWrapper - Daniele's Tools Wrapper for FFmpeg
    Copyright (C) 2022 daniznf

    DTFFWrapper is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DTFFWrapper is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <https://www.gnu.org/licenses/>.
    
    https://github.com/daniznf/DTFFWrapper
 */

using Xunit.Abstractions;

namespace xTest
{
    public class MediaFile_Test
    {
        private string sourceDir, videoSourceName, videoSourcePath;
        private ITestOutputHelper output;

        public MediaFile_Test(ITestOutputHelper output)
        {
            this.output = output;
            sourceDir = "C:\\DTFF_Test\\Source videos";
            videoSourceName = "Video.vid";
            videoSourcePath = Path.Combine(sourceDir, videoSourceName);
        }

        [Fact]
        public void MediaStream()
        {
            AutoGeneratedMediaFile videoFile = new(videoSourcePath);
            videoFile.GenerateInfo();

            Assert.Equal(0, videoFile.SelectedStreamIndex);
            Assert.Equal("vCodec", videoFile.SelectedStream.CodecName);
            Assert.Equal(30, videoFile.SelectedStream.RFrameRate);
            Assert.Equal(1920, videoFile.SelectedStream.Width);

            videoFile.SelectedStreamIndex = 1;
            Assert.Equal(1, videoFile.SelectedStreamIndex);
            Assert.Equal("aCodec", videoFile.SelectedStream.CodecName);
            Assert.Equal(44100, videoFile.SelectedStream.SampleRate);
            Assert.Equal(2, videoFile.SelectedStream.Channels);
        }
    }
}